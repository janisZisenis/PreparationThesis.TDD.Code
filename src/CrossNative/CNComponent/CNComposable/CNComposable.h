#ifndef CROSSNATIVE_COMPOSABLE_H#define CROSSNATIVE_COMPOSABLE_H#include <vector>#include <CrossNative/CrossNative_EXPORT.h>#include "CrossNative/CNComponent/CNComponent.h"class CNComposer;class CNComposable;typedef std::shared_ptr<CNComposable> CNComposablePtr;class CrossNative_EXPORT CNComposable : public CNComponent {public:    static CNComposablePtr getNewInstance(CNVisitablePtr visitable, std::shared_ptr<CNComposer> composer);    virtual  ~CNComposable();protected:    CNComposable(CNVisitablePtr visitable, std::shared_ptr<CNComposer> composer);public:    virtual void add(CNComponentPtr child) override;    virtual void remove(CNComponentPtr child) override;    virtual bool isParentOf(CNComponentPtr component) override;    virtual void accept(CNVisitorPtr visitor) override;private:    virtual void addToChildren(CNComponentPtr child);    virtual void removeFromChildren(CNComponentPtr child);    virtual void mount(CNComponentPtr component);    virtual void dismount(CNComponentPtr component);    virtual int findPosition(CNComponentPtr component);private:    CNVisitablePtr visitable;    std::shared_ptr<CNComposer> composer;    std::vector< CNComponentPtr > children;};#endif //CROSSNATIVE_COMPOSABLE_H