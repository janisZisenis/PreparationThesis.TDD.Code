#ifndef CROSSNATIVE_COMPOSER_TESTDOUBLES_H#define CROSSNATIVE_COMPOSER_TESTDOUBLES_H#include "CNComposer.h"class CNComposerDummy;typedef std::shared_ptr<CNComposerDummy> CNComposerDummyPtr;class CNComposerDummy : public CNComposer {public:    static CNComposerDummyPtr getNewInstance() {        return CNComposerDummyPtr(new CNComposerDummy());    }    virtual  ~CNComposerDummy() {}protected:    CNComposerDummy() {}public:    virtual void mount(std::shared_ptr<CNVisitable> visitable) override {}    virtual void dismount(std::shared_ptr<CNVisitable> visitable) override {}};class CNComposerSpy;typedef std::shared_ptr<CNComposerSpy> CNComposerSpyPtr;class CNComposerSpy : public CNComposerDummy {public:    static CNComposerSpyPtr getNewInstance() {        return CNComposerSpyPtr(new CNComposerSpy());    }    virtual  ~CNComposerSpy() {}protected:    CNComposerSpy() {}public:    virtual void mount(std::shared_ptr<CNVisitable> visitable) override {        mounted = visitable;    }    virtual std::shared_ptr<CNVisitable> getMounted() {        return mounted;    }    virtual void dismount(std::shared_ptr<CNVisitable> visitable) override {        dismounted = visitable;    }    virtual std::shared_ptr<CNVisitable> getDismounted() {        return dismounted;    }private:    std::shared_ptr<CNVisitable> mounted;    std::shared_ptr<CNVisitable> dismounted;};#endif //CROSSNATIVE_COMPOSER_TESTDOUBLES_H