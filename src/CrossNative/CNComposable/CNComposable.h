#ifndef CROSSNATIVE_COMPOSABLE_H#define CROSSNATIVE_COMPOSABLE_H#include <memory>#include <CrossNative/CrossNative_EXPORT.h>class CNComposer;class CNComponent;class CNComposable;typedef std::shared_ptr<CNComposable> CNComposablePtr;class CrossNative_EXPORT CNComposable {public:    static CNComposablePtr getNewInstance(std::shared_ptr<CNComposer> composer);    virtual  ~CNComposable();protected:    CNComposable(std::shared_ptr<CNComposer> composer);public:    virtual void add(std::shared_ptr<CNComponent> component);private:    std::shared_ptr<CNComposer> composer;};#endif //CROSSNATIVE_COMPOSABLE_H